/**
 * Module dependencies
 */

@require './variables'

/**
 * Generate a query for screens above a given `size`.
 *
 * Example:
 *
 *   ```stylus
 *   +screen-size-above('tablet')
 *     .above-keyword
 *       color green
 *   +screen-size-above(500px)
 *     .above-size
 *       color green
 *   ```
 *
 *   ```jade
 *   .above-keyword .above-keyword
 *   .above-size .above-size
 *   ```
 *
 * @param {Unit} size
 * @return {Block}
 * @type {Mixin}
 * @api public
 */

screen-size-above(size)
  sz = size in media-queries--sizes ? media-queries--sizes[size][1] : size
  condition = 'screen and (min-width: %s)' % sz
  @media condition
    {block}

/**
 * Generate a query for screens below a given `size`.
 *
 * Example:
 *
 *   ```stylus
 *   +screen-size-below('wide')
 *     .below-keyword
 *       color green
 *   +screen-size-below(1000px)
 *     .below-size
 *       color green
 *   ```
 *
 *   ```jade
 *   .below-keyword .below-keyword
 *   .below-size .below-size
 *   ```
 *
 * @param {Unit} size
 * @return {Block}
 * @type {Mixin}
 * @api public
 */

screen-size-below(size)
  sz = size in media-queries--sizes ? media-queries--sizes[size][0] : size
  condition = 'screen and (max-width: %s)' % sz
  @media condition
    {block}

/**
 * Generate a query for screens between `low` and `high`.
 *
 * Example:
 *
 *   ```stylus
 *   +screen-size-between(500, 1000px)
 *     .between-size-size
 *       color green
 *
 *   +screen-size-between('tablet', 'laptop')
 *     .between-keyword-keyword
 *       color green
 *
 *   +screen-size-between('tablet', 1500px)
 *     .between-keyword-size
 *       color green
 *
 *   +screen-size-between(500px, 'laptop')
 *     .between-size-keyword
 *       color green
 *   ```
 *
 *   ```jade
 *   .between-size-size .between-size-size
 *   .between-keyboard-keyboard .between-keyboard-keyboard
 *   .between-keyboard-size .between-keyboard-size
 *   .between-size-keyboad .between-size-keyboard
 *   ```
 *
 * @param {Unit} size
 * @return {Block}
 * @type {Mixin}
 * @api public
 */

screen-size-between(low, high)
  lowsz = low in media-queries--sizes ? media-queries--sizes[low][0] : low
  highsz = high in media-queries--sizes ? media-queries--sizes[high][1] : high
  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)
  @media condition
    {block}

/**
 * Generate a query for screens that match a given `size`.
 *
 * Examples:
 *
 *   ```stylus
 *   +screen-size('palm')
 *     .palm
 *       color green
 *   +screen-size('tablet')
 *     .tablet
 *       color green
 *   +screen-size('laptop')
 *     .laptop
 *       color green
 *   +screen-size('desktop')
 *     .desktop
 *       color green
 *   +screen-size('wide')
 *     .wide
 *       color green
 *   ```
 *
 *   ```jade
 *   .palm .palm
 *   .tablet .tablet
 *   .laptop .laptop
 *   .desktop .desktop
 *   .wide .wide
 *   ```
 *
 * @param {Unit} size
 * @return {Block}
 * @type {Mixin}
 * @api public
 */

screen-size(size)
  lowsz = media-queries--sizes[size][0]
  highsz = media-queries--sizes[size][1]
  condition = 'screen and (min-width: %s) and (max-width: %s)' % (lowsz highsz)
  @media condition
    {block}

/**
 * Generate a query for screens that match a given `orientation`.
 *
 * Examples:
 *
 *   ```stylus
 *   +screen-orientation('portrait')
 *     .orientation-portrait
 *       color green
 *
 *   +screen-orientation('landscape')
 *     .orientation-landscape
 *       color green
 *   ```
 *
 *   ```jade
 *   .orientation-portrait .orientation-portrait
 *   .orientation-landscape .orientation-landscape
 *   ```
 *
 * @param {Unit} orientation
 * @return {Block}
 * @type {Mixin}
 * @api public
 */

screen-orientation(orientation)
  condition = 'screen and (orientation: %s)' % unquote(orientation)
  @media condition
    {block}

/**
 * Generate a query for high DPI screens
 *
 * Example:
 *
 *   ```stylus
 *   +screen-high-DPI()
 *     .high-DPI
 *       color green
 *   ```
 *
 *   ```jade
 *   .high-DPI .high-DPI
 *   ```
 *
 * @return {Block}
 * @type {Mixin}
 * @api public
 */

screen-high-DPI()
  conditions = ()
  all-conditions = ''
  for prefix in '-webkit-min-' 'min--moz-' 'min-'
    condition = 'only screen and (%sdevice-pixel-ratio: 2)' % prefix
    push(conditions, condition)
  all-conditions = join(', ', conditions)
  @media all-conditions
    {block}

p(media-queries--sizes)
